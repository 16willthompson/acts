#! /usr/bin/env python
import requests
import argparse
import re
from gitlab_helpers import *

def mark_merge_request_wip(args):
    r = requests.get(args.mr_url,headers={"PRIVATE-TOKEN":args.token})
    test_response(r)
    mr_dict = r.json()
    old_title = mr_dict["title"]
    # check whether MR is already marked as WIP
    if re.match("^WIP:|\[WIP\].*",old_title):
        print "merge request is already marked as 'work in progress'"
    else:
        new_title = "[WIP] " + old_title
        r = requests.put(args.mr_url,data = {"title": new_title}, headers={"PRIVATE-TOKEN":args.token})
        test_response(r)

def unmark_merge_request_wip(args):
    r = requests.get(args.mr_url,headers={"PRIVATE-TOKEN":args.token})
    test_response(r)
    mr_dict = r.json()
    old_title = mr_dict["title"]
    # check whether MR is already marked as WIP
    result = re.match("^WIP:|\[WIP\]\s?(.*)",old_title)
    if result:
        new_title = result.group(1)        
        r = requests.put(args.mr_url,data = {"title": new_title}, headers={"PRIVATE-TOKEN":args.token})
        test_response(r)
    else:
        print "merge request not marked as 'work in progress'"

def comment_merge_request(args):
    r = requests.post(args.mr_url + "/comments",data = {"note": args.comment}, headers={"PRIVATE-TOKEN":args.token})
    test_response(r)

def main():
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("--project",required=True,help="GitLab project with namespace (e.g. user/my-project)")
    parent_parser.add_argument("--url",default="https://gitlab.cern.ch",help="URL of GitLab instance")
    parent_parser.add_argument("--merge-request-id",dest="mr_id",required=True,type=int,help="(unique) ID of merge request (not the project specific IID)")
    parent_parser.add_argument("--token",required=True,help="private GitLab user token")

    top_parser = argparse.ArgumentParser(description="GitLab merge request commenter",
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = top_parser.add_subparsers(title="subcommands",help="available commands")

    mark_wip_parser = subparsers.add_parser("mark_wip",parents=[parent_parser],help="mark merge request as 'work-in-progress'")
    mark_wip_parser.set_defaults(func=mark_merge_request_wip)

    remove_wip_parser = subparsers.add_parser("remove_wip",parents=[parent_parser],help="unmark merge request as 'work-in-progress'")
    remove_wip_parser.set_defaults(func=unmark_merge_request_wip)

    comment_parser = subparsers.add_parser("add",parents=[parent_parser],help="add comment on merge request")
    comment_parser.add_argument("comment",help="comment text")
    comment_parser.set_defaults(func=comment_merge_request)

    args = top_parser.parse_args()

    # turn GitLab instance url into API access point
    if args.url[-1] != "/":
        args.url += "/"
    args.url += "api/v3/"

    # get unique project and MR id
    args.project_id = get_project_id(args.url,args.project,args.token)
    args.mr_url = args.url + "projects/{0}/merge_request/{1}".format(args.project_id,args.mr_id)
    
    args.func(args)
    
if __name__ == "__main__":
    main()
