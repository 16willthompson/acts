stages:
  - check
  - build
  - test
  - deploy

before_script:
  # CI executor uses fail on error by default
  # setup scripts do not like that
  - set +e && source CI/setup_lcg91.sh; set -e

# pre-build checks

format:
  stage: check
  image: gitlab-registry.cern.ch/acts/machines/check:latest
  before_script: []
  dependencies: []
  script:
    - CI/check_format .
  artifacts:
    paths:
      - changed
    when: on_failure

license:
  stage: check
  image: python:alpine3.6
  before_script: []
  dependencies: []
  script:
    - apk add --no-cache git
    - CI/check_license.py . --check-years

  
include_guards:
  stage: check
  image: python:alpine3.6
  before_script: []
  dependencies: []
  script:
    - CI/check_include_guards.py . --fail-global

clang_tidy:
  stage: check
  image: gitlab-registry.cern.ch/acts/machines/check
  before_script:
    - CI/env_info.sh
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS
    - cd ..
    - run-clang-tidy.py -p build -header-filter="$PWD/.*" -j${ACTS_NCPUS}

oclint:
  stage: check
  image: gitlab-registry.cern.ch/acts/machines/check
  before_script: []
  dependencies: []
  script:
    - mkdir build && cd build
    - cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS
    - cd ..
    - oclint-json-compilation-database -p build -- -report-type html -o oclint_report.html


# SLC6, LCG88 (legacy build)
#
# this is only here to test backwards compatibility with boost 1.62
# DD4hep and ROOT are not new enough so they must be disabled.

build_slc6_lcg88:
  stage: build
  image: gitlab-registry.cern.ch/acts/machines/slc6:latest
  tags:
    - cvmfs
  before_script:
    - set +e && source CI/setup_lcg88.sh; set -e
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_MATERIAL_PLUGIN=on -DACTS_BUILD_LEGACY=on -DCMAKE_BUILD_TYPE=Release ..
    - cmake --build . -- -j${ACTS_NCPUS}

# job templates w/ default settings
#
# the build directory is always `build`. To select a specific build version
# you always have to define the correct `dependencies` settings to only
# load the artifacts from one build.

.build: &template_build
  stage: build
  image: gitlab-registry.cern.ch/acts/machines/slc6:latest
  tags:
    - cvmfs
  variables:
    BUILD_TYPE: Release
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DD4HEP_PLUGIN=on -DACTS_BUILD_MATERIAL_PLUGIN=on -DACTS_BUILD_TGEO_PLUGIN=on -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
    - cmake --build . -- -j${ACTS_NCPUS}
    - find . -name "*.o" -delete
  artifacts:
    paths:
      - build
    expire_in: 6 hours

.unit_tests: &template_unit_tests
  stage: test
  image: gitlab-registry.cern.ch/acts/machines/slc6:latest
  tags:
    - cvmfs
  variables:
      CTEST_OUTPUT_ON_FAILURE: 1
  script:
    - cmake --build build -- test
  artifacts:
    paths:
      - build
    expire_in: 6 hours

.integration_tests: &template_integration_tests
  stage: test
  image: gitlab-registry.cern.ch/acts/machines/slc6:latest
  tags:
    - cvmfs
  variables:
      CTEST_OUTPUT_ON_FAILURE: 1
  script:
    - cmake --build build -- integration_tests

# SLC6, LCG91 (default build)

build_slc6_lcg91:
  <<: *template_build
  variables:
    BUILD_TYPE: Debug

unit_tests_slc6_lcg91:
  <<: *template_unit_tests
  dependencies:
    - build_slc6_lcg91
  # replace script to also calculate code coverage
  script:
    - cmake --build build -- test
    - cmake --build build -- coverage
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    paths:
      - build/coverage

integration_tests_slc6_lcg91:
  <<: *template_integration_tests
  dependencies:
    - build_slc6_lcg91

# SLC, LCG91, LLVM40

build_slc6_lcg91_clang:
  <<: *template_build
  before_script:
    - set +e && source CI/setup_lcg91.sh; set -e
    - source CI/setup_clang.sh

unit_tests_slc6_lcg91_clang:
  <<: *template_unit_tests
  dependencies:
    - build_slc6_lcg91_clang
  before_script:
    - set +e && source CI/setup_lcg91.sh; set -e
    - source CI/setup_clang.sh

integration_tests_slc6_lcg91_clang:
  <<: *template_integration_tests
  dependencies:
    - build_slc6_lcg91_clang
  before_script:
    - set +e && source CI/setup_lcg91.sh; set -e
    - source CI/setup_clang.sh

# SLC6, LCG92

build_slc6_lcg92:
  <<: *template_build
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

unit_tests_slc6_lcg92:
  <<: *template_unit_tests
  dependencies:
    - build_slc6_lcg92
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

integration_tests_slc6_lcg92:
  <<: *template_integration_tests
  dependencies:
    - build_slc6_lcg92
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

# BUILD WITH LEGACY DISABLED
# ONLY THIS ONE JOB
build_slc6_lcg92_no_legacy:
  <<: *template_build
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DD4HEP_PLUGIN=on -DACTS_BUILD_MATERIAL_PLUGIN=on -DACTS_BUILD_TGEO_PLUGIN=on -DACTS_BUILD_LEGACY=off -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
    - cmake --build . -- -j${ACTS_NCPUS}
    - find . -name "*.o" -delete

# CC7, LCG91

build_cc7_lcg91:
  <<: *template_build
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest

unit_tests_cc7_lcg91:
  <<: *template_unit_tests
  dependencies:
    - build_cc7_lcg91
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest

integration_tests_cc7_lcg91:
  <<: *template_integration_tests
  dependencies:
    - build_cc7_lcg91
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest

# CC7, LCG92

build_cc7_lcg92:
  <<: *template_build
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

unit_tests_cc7_lcg92:
  <<: *template_unit_tests
  dependencies:
    - build_cc7_lcg92
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

integration_tests_cc7_lcg92:
  <<: *template_integration_tests
  dependencies:
    - build_cc7_lcg92
  image: gitlab-registry.cern.ch/acts/machines/cc7:latest
  before_script:
    - set +e && source CI/setup_lcg92.sh; set -e

doc:
  stage: build
  tags:
    - cvmfs
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DACTS_BUILD_DOC=on -DACTS_BUILD_TESTS=off ..
    - cmake --build . -- doc
  artifacts:
    paths:
      - build/doc/html

doc_deploy:
  stage: deploy
  dependencies:
    - doc
  script:
    - unset PYTHONHOME
    - echo "$ATSJENKINS_PASSWORD" | kinit atsjenkins@CERN.CH 2>&1 >/dev/null
    - CI/deploy_tag . build/doc/html "acts-developers@cern.ch acts-users@cern.ch"
  only:
    - tags

website_deploy:
  stage: deploy
  dependencies: []
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=master https://gitlab.cern.ch/api/v4/projects/36428/trigger/pipeline
  only:
    - master
    - tags

coverage_deploy:
  stage: deploy
  dependencies:
    - unit_tests_slc6_lcg91
  script:
    - unset PYTHONHOME
    - echo "$ATSJENKINS_PASSWORD" | kinit atsjenkins@CERN.CH 2>&1 >/dev/null
    - CI/publish_coverage.py
  after_script:
    - kdestroy
  only:
    - master


sync_releases:
  stage: deploy
  script:
    - unset PYTHONHOME
    - echo "$ATSJENKINS_PASSWORD" | kinit atsjenkins@CERN.CH 2>&1 >/dev/null
    - pip install --user python-cern-sso-krb
    - CI/sync_releases.py
  after_script:
    - kdestroy
  only:
    - tags


